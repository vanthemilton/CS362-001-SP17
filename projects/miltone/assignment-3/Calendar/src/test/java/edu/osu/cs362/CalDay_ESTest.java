/*
 * This file was automatically generated by EvoSuite
 * Thu May 11 22:38:47 GMT 2017
 */

package edu.osu.cs362;

import org.junit.Test;

import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.LinkedList;

import static org.junit.Assert.*;

public class CalDay_ESTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      GregorianCalendar mockGregorianCalendar0 = new GregorianCalendar();
      CalDay calDay0 = new CalDay((GregorianCalendar) mockGregorianCalendar0);
      calDay0.isValid();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CalDay calDay0 = new CalDay();
      calDay0.year = 1251;
      calDay0.getYear();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CalDay calDay0 = new CalDay();
      calDay0.year = (-130);
      calDay0.getYear();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CalDay calDay0 = new CalDay();
      LinkedList<Appt> linkedList0 = new LinkedList<Appt>();
      calDay0.appts = linkedList0;
      calDay0.getSizeAppts();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CalDay calDay0 = new CalDay();
      LinkedList<Appt> linkedList0 = new LinkedList<Appt>();
      calDay0.appts = linkedList0;
      Appt appt0 = new Appt(43, 43, 2088, 2088, 43, "", "");
      linkedList0.add(appt0);
      calDay0.getSizeAppts();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CalDay calDay0 = new CalDay();
      calDay0.month = 1188;
      calDay0.getMonth();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CalDay calDay0 = new CalDay();
      calDay0.month = 2088;
      calDay0.month = 2088;
      calDay0.month = (-1355);
      calDay0.getMonth();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CalDay calDay0 = new CalDay();
      calDay0.getDay();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CalDay calDay0 = new CalDay();
      calDay0.day = (-1331);
      calDay0.getDay();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CalDay calDay0 = new CalDay();
      calDay0.getAppts();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CalDay calDay0 = new CalDay();
      LinkedList<Appt> linkedList0 = new LinkedList<Appt>();
      calDay0.appts = linkedList0;
      Appt appt0 = new Appt(43, 43, 2088, 2088, 43, "", "");
      calDay0.appts.add(appt0);
      calDay0.getAppts();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CalDay calDay0 = new CalDay();
      calDay0.valid = true;
      // Undeclared exception!
      try {
        calDay0.toString();
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      GregorianCalendar mockGregorianCalendar0 = new GregorianCalendar(4314, 4314, 4314);
      CalDay calDay0 = new CalDay((GregorianCalendar) mockGregorianCalendar0);
      calDay0.appts = null;
      // Undeclared exception!
      try {
        calDay0.iterator();
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CalDay calDay0 = null;
      try {
        calDay0 = new CalDay((GregorianCalendar) null);
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CalDay calDay0 = new CalDay();
      calDay0.getYear();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      GregorianCalendar mockGregorianCalendar0 = new GregorianCalendar(4314, 4314, 4314);
      CalDay calDay0 = new CalDay((GregorianCalendar) mockGregorianCalendar0);
      calDay0.getDay();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      GregorianCalendar mockGregorianCalendar0 = new GregorianCalendar(4314, 4314, 4314);
      CalDay calDay0 = new CalDay((GregorianCalendar) mockGregorianCalendar0);
      calDay0.getAppts();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      GregorianCalendar mockGregorianCalendar0 = new GregorianCalendar(0, 0, 0, 0, 0);
      CalDay calDay0 = new CalDay((GregorianCalendar) mockGregorianCalendar0);
      Appt appt0 = new Appt(0, 0, 1, 1, 0, "YMD", "YMD");
      calDay0.addAppt(appt0);
      calDay0.toString();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CalDay calDay0 = new CalDay();
      calDay0.toString();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      GregorianCalendar mockGregorianCalendar0 = new GregorianCalendar(4314, 4314, 4314);
      CalDay calDay0 = new CalDay((GregorianCalendar) mockGregorianCalendar0);
      calDay0.iterator();
      assertEquals(4685, calDay0.getYear());
      assertEquals(22, calDay0.getDay());
      assertEquals(3, calDay0.getMonth());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CalDay calDay0 = new CalDay();
      Iterator<Object> iterator0 = (Iterator<Object>)calDay0.iterator();
      assertNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      GregorianCalendar mockGregorianCalendar0 = new GregorianCalendar(0, 0, 0, 0, 0);
      CalDay calDay0 = new CalDay((GregorianCalendar) mockGregorianCalendar0);
      Appt appt0 = new Appt(0, 0, 1, 1, 0, "YMD", "YMD");
      calDay0.addAppt(appt0);
      calDay0.addAppt(appt0);
      assertEquals(11, calDay0.getMonth());
      assertEquals(31, calDay0.getDay());
      assertEquals(2, calDay0.getYear());
      assertTrue(calDay0.isValid());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CalDay calDay0 = new CalDay();
      Appt appt0 = new Appt((-4257), (-4257), (-4257), (-4257), (-4257), "aQVDeTr`3Xs}", "aQVDeTr`3Xs}");
      calDay0.addAppt(appt0);
      assertFalse(calDay0.isValid());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CalDay calDay0 = new CalDay();
      // Undeclared exception!
      try {
        calDay0.getSizeAppts();
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CalDay calDay0 = new CalDay();
      Appt appt0 = new Appt(9, 9, 9, 9, 9, "gY+w_WlLqIyEN>Fd'", "gY+w_WlLqIyEN>Fd'");
      // Undeclared exception!
      try {
        calDay0.addAppt(appt0);
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CalDay calDay0 = new CalDay();
      int int0 = calDay0.getMonth();
      assertEquals(0, int0);
      assertFalse(calDay0.isValid());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CalDay calDay0 = new CalDay();
      boolean boolean0 = calDay0.isValid();
      assertFalse(boolean0);
  }
}
