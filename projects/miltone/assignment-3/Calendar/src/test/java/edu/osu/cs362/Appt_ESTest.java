/*
 * This file was automatically generated by EvoSuite
 * Thu May 11 22:36:50 GMT 2017
 */

package edu.osu.cs362;

import org.junit.Test;

import static org.junit.Assert.*;

public class Appt_ESTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Appt appt0 = new Appt(2, 2, 2, 2, 2, "", "");
      String string0 = appt0.toString();
      assertNotNull(string0);
      assertEquals("\t2/2/2 at 2:2am ,, \n", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Appt appt0 = new Appt(12, 12, 12, 12, 12, "((", "((");
      assertEquals("((", appt0.getDescription());
      assertEquals(12, appt0.getStartMinute());
      assertEquals(12, appt0.getStartDay());
      assertEquals(12, appt0.getStartHour());
      assertTrue(appt0.getValid());
      assertEquals(12, appt0.getStartYear());
      assertEquals("((", appt0.getTitle());
      assertEquals(12, appt0.getStartMonth());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Appt appt0 = new Appt(0, 59, 59, 59, 0, "", "");
      assertEquals(0, appt0.getStartHour());
      assertEquals(0, appt0.getStartYear());
      assertFalse(appt0.getValid());
      assertEquals(59, appt0.getStartMinute());
      assertEquals(59, appt0.getStartDay());
      assertEquals(59, appt0.getStartMonth());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Appt appt0 = new Appt(2562, 2562, 2562, 23, 492, "", "");
      assertEquals(2562, appt0.getStartHour());
      
      appt0.setStartHour(23);
      assertEquals(492, appt0.getStartYear());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Appt appt0 = new Appt(3, 1, 1, 1, 3, "", "");
      boolean boolean0 = appt0.getValid();
      assertEquals(3, appt0.getStartYear());
      assertEquals(3, appt0.getStartHour());
      assertTrue(boolean0);
      assertEquals(1, appt0.getStartMonth());
      assertEquals(1, appt0.getStartMinute());
      assertEquals(1, appt0.getStartDay());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Appt appt0 = new Appt(11, 11, 11, 11, 11, "", "");
      appt0.getTitle();
      assertEquals(11, appt0.getStartMonth());
      assertEquals(11, appt0.getStartHour());
      assertEquals(11, appt0.getStartYear());
      assertTrue(appt0.getValid());
      assertEquals(11, appt0.getStartMinute());
      assertEquals(11, appt0.getStartDay());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Appt appt0 = new Appt(16, 23, (-876), (-876), (-876), (String) null, (String) null);
      int int0 = appt0.getStartYear();
      assertEquals(16, appt0.getStartHour());
      assertEquals(-876, appt0.getStartDay());
      assertFalse(appt0.getValid());
      assertEquals(-876, appt0.getStartMonth());
      assertEquals((-876), int0);
      assertEquals(23, appt0.getStartMinute());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Appt appt0 = new Appt(10, 10, 0, 10, 356, "", "");
      int int0 = appt0.getStartMonth();
      assertEquals(0, appt0.getStartDay());
      assertEquals(356, appt0.getStartYear());
      assertEquals(10, int0);
      assertEquals(10, appt0.getStartHour());
      assertEquals(10, appt0.getStartMinute());
      assertFalse(appt0.getValid());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Appt appt0 = new Appt(3529, (-1828), 3529, (-1828), 3529, (String) null, (String) null);
      int int0 = appt0.getStartMonth();
      assertEquals((-1828), int0);
      assertEquals(3529, appt0.getStartDay());
      assertEquals(-1828, appt0.getStartMinute());
      assertEquals(3529, appt0.getStartYear());
      assertFalse(appt0.getValid());
      assertEquals(3529, appt0.getStartHour());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Appt appt0 = new Appt((-362), (-362), (-362), (-362), (-362), "qQ^on*T9\"GRW#5YfB-^", "qQ^on*T9\"GRW#5YfB-^");
      int int0 = appt0.getStartMinute();
      assertEquals(-362, appt0.getStartYear());
      assertEquals(-362, appt0.getStartHour());
      assertEquals(-362, appt0.getStartMonth());
      assertEquals("qQ^on*T9\"GRW#5YfB-^", appt0.getTitle());
      assertEquals("qQ^on*T9\"GRW#5YfB-^", appt0.getDescription());
      assertEquals((-362), int0);
      assertEquals(-362, appt0.getStartDay());
      assertFalse(appt0.getValid());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Appt appt0 = new Appt(0, (-608), (-608), (-608), 31, "", "");
      int int0 = appt0.getStartHour();
      assertEquals(-608, appt0.getStartMonth());
      assertEquals(-608, appt0.getStartMinute());
      assertFalse(appt0.getValid());
      assertEquals(0, int0);
      assertEquals(-608, appt0.getStartDay());
      assertEquals(31, appt0.getStartYear());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Appt appt0 = new Appt((-236), (-236), 237, (-236), (-1107), "n2Wb6tw*_l:W.[V", "z");
      int int0 = appt0.getStartHour();
      assertEquals(-236, appt0.getStartMonth());
      assertEquals(-236, appt0.getStartMinute());
      assertEquals("n2Wb6tw*_l:W.[V", appt0.getTitle());
      assertEquals(237, appt0.getStartDay());
      assertEquals((-236), int0);
      assertEquals(-1107, appt0.getStartYear());
      assertEquals("z", appt0.getDescription());
      assertFalse(appt0.getValid());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Appt appt0 = new Appt((-672), (-672), (-672), (-672), (-672), "xWy{;8~)L`g", "xWy{;8~)L`g");
      int int0 = appt0.getStartDay();
      assertEquals("xWy{;8~)L`g", appt0.getDescription());
      assertEquals(-672, appt0.getStartHour());
      assertEquals(-672, appt0.getStartYear());
      assertEquals(-672, appt0.getStartMinute());
      assertEquals(-672, appt0.getStartMonth());
      assertFalse(appt0.getValid());
      assertEquals((-672), int0);
      assertEquals("xWy{;8~)L`g", appt0.getTitle());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Appt appt0 = new Appt(11, 11, 11, 11, 11, "s*B", "s*B");
      String string0 = appt0.getDescription();
      assertEquals(11, appt0.getStartMonth());
      assertTrue(appt0.getValid());
      assertEquals(11, appt0.getStartMinute());
      assertEquals(11, appt0.getStartDay());
      assertEquals("s*B", string0);
      assertEquals(11, appt0.getStartHour());
      assertEquals(11, appt0.getStartYear());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Appt appt0 = new Appt(0, 0, 0, 0, 0, "'Y.ka", "'Y.ka");
      appt0.setDescription("'Y.ka");
      assertEquals(0, appt0.getStartYear());
      assertEquals(0, appt0.getStartMinute());
      assertEquals(0, appt0.getStartHour());
      assertFalse(appt0.getValid());
      assertEquals(0, appt0.getStartDay());
      assertEquals(0, appt0.getStartMonth());
      assertEquals("'Y.ka", appt0.getDescription());
      assertEquals("'Y.ka", appt0.getTitle());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Appt appt0 = new Appt((-362), (-362), (-362), (-362), (-362), "qQ^on*T9\"GRW#5YfB-^", "qQ^on*T9\"GRW#5YfB-^");
      assertEquals("qQ^on*T9\"GRW#5YfB-^", appt0.getDescription());
      
      appt0.setDescription((String) null);
      assertEquals(-362, appt0.getStartMonth());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Appt appt0 = new Appt(10, 10, 0, 10, 356, "", "");
      appt0.setTitle("&");
      assertEquals("&", appt0.getTitle());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Appt appt0 = new Appt(0, 0, 0, 0, 2269, "", "");
      appt0.setTitle((String) null);
      assertEquals(2269, appt0.getStartYear());
      assertEquals(0, appt0.getStartHour());
      assertEquals(0, appt0.getStartMinute());
      assertEquals(0, appt0.getStartDay());
      assertEquals(0, appt0.getStartMonth());
      assertFalse(appt0.getValid());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Appt appt0 = new Appt(11, 11, 11, 11, 11, "E'dV+EKK", "E'dV+EKK");
      assertEquals(11, appt0.getStartHour());
      
      appt0.setStartHour(12);
      appt0.toString();
      assertEquals(12, appt0.getStartHour());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Appt appt0 = new Appt(11, 11, 11, 11, 11, "E'dV+EKK", "E'dV+EKK");
      String string0 = appt0.toString();
      assertEquals("\t11/11/11 at 11:11am ,E'dV+EKK, E'dV+EKK\n", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Appt appt0 = new Appt(21, 21, 21, 21, 21, "!D`", "!D`");
      assertFalse(appt0.getValid());
      assertEquals(21, appt0.getStartHour());
      assertEquals("!D`", appt0.getTitle());
      assertEquals(21, appt0.getStartMonth());
      assertEquals(21, appt0.getStartYear());
      assertEquals("!D`", appt0.getDescription());
      assertEquals(21, appt0.getStartMinute());
      assertEquals(21, appt0.getStartDay());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Appt appt0 = new Appt(0, 0, 14, 0, 32, " ,", " ,");
      boolean boolean0 = appt0.getValid();
      assertFalse(boolean0);
      assertEquals(" ,", appt0.getDescription());
      assertEquals(14, appt0.getStartDay());
      assertEquals(" ,", appt0.getTitle());
      assertEquals(0, appt0.getStartMinute());
      assertEquals(0, appt0.getStartMonth());
      assertEquals(0, appt0.getStartHour());
      assertEquals(32, appt0.getStartYear());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Appt appt0 = new Appt(10, 10, 0, 10, 356, "", "");
      appt0.setStartDay(31);
      assertEquals(31, appt0.getStartDay());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Appt appt0 = new Appt(0, 0, 2740, (-1682), 0, "g?>n]:bCC", "g?>n]:bCC");
      int int0 = appt0.getStartDay();
      assertEquals("g?>n]:bCC", appt0.getDescription());
      assertEquals(0, appt0.getStartHour());
      assertEquals("g?>n]:bCC", appt0.getTitle());
      assertEquals(2740, int0);
      assertEquals(0, appt0.getStartYear());
      assertEquals(0, appt0.getStartMinute());
      assertEquals(-1682, appt0.getStartMonth());
      assertFalse(appt0.getValid());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Appt appt0 = new Appt((-1728), (-1728), (-1728), (-1728), 0, "\n", "\n");
      String string0 = appt0.getTitle();
      assertEquals(-1728, appt0.getStartDay());
      assertFalse(appt0.getValid());
      assertEquals(-1728, appt0.getStartMinute());
      assertEquals(0, appt0.getStartYear());
      assertEquals(-1728, appt0.getStartHour());
      assertEquals("\n", string0);
      assertEquals(-1728, appt0.getStartMonth());
      assertEquals("\n", appt0.getDescription());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Appt appt0 = new Appt((-1728), (-1728), (-1728), (-1728), 0, "\n", "\n");
      int int0 = appt0.getStartYear();
      assertEquals("\n", appt0.getDescription());
      assertEquals(0, int0);
      assertEquals(-1728, appt0.getStartHour());
      assertEquals(-1728, appt0.getStartDay());
      assertFalse(appt0.getValid());
      assertEquals(-1728, appt0.getStartMinute());
      assertEquals(-1728, appt0.getStartMonth());
      assertEquals("\n", appt0.getTitle());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Appt appt0 = new Appt(Integer.MAX_VALUE, Integer.MAX_VALUE, 0, 0, 0, "org.apache.xerces.jaxp.datatype.XMLGregorianCalendarImpl", ", ");
      int int0 = appt0.getStartDay();
      assertEquals(0, int0);
      assertEquals(0, appt0.getStartMonth());
      assertEquals(2147483647, appt0.getStartMinute());
      assertEquals(", ", appt0.getDescription());
      assertEquals(0, appt0.getStartYear());
      assertFalse(appt0.getValid());
      assertEquals(2147483647, appt0.getStartHour());
      assertEquals("org.apache.xerces.jaxp.datatype.XMLGregorianCalendarImpl", appt0.getTitle());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Appt appt0 = new Appt(Integer.MAX_VALUE, Integer.MAX_VALUE, 0, 0, 0, "org.apache.xerces.jaxp.datatype.XMLGregorianCalendarImpl", ", ");
      int int0 = appt0.getStartHour();
      assertEquals(0, appt0.getStartDay());
      assertFalse(appt0.getValid());
      assertEquals(2147483647, appt0.getStartMinute());
      assertEquals(", ", appt0.getDescription());
      assertEquals("org.apache.xerces.jaxp.datatype.XMLGregorianCalendarImpl", appt0.getTitle());
      assertEquals(Integer.MAX_VALUE, int0);
      assertEquals(0, appt0.getStartYear());
      assertEquals(0, appt0.getStartMonth());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Appt appt0 = new Appt(10, 10, 0, 10, 356, "", "");
      assertEquals(10, appt0.getStartMinute());
      
      appt0.setStartMinute(0);
      int int0 = appt0.getStartMinute();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Appt appt0 = new Appt((-1316), (-1316), (-1316), (-1316), (-1316), (String) null, (String) null);
      String string0 = appt0.getDescription();
      assertEquals(-1316, appt0.getStartMinute());
      assertEquals(-1316, appt0.getStartDay());
      assertEquals(-1316, appt0.getStartHour());
      assertNotNull(string0);
      assertEquals(-1316, appt0.getStartYear());
      assertEquals(-1316, appt0.getStartMonth());
      assertFalse(appt0.getValid());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Appt appt0 = new Appt((-572), (-20), 0, 0, (-572), "Timezone", "Timezone");
      int int0 = appt0.getStartMonth();
      assertEquals("Timezone", appt0.getDescription());
      assertEquals(-572, appt0.getStartHour());
      assertFalse(appt0.getValid());
      assertEquals(-572, appt0.getStartYear());
      assertEquals(-20, appt0.getStartMinute());
      assertEquals(0, int0);
      assertEquals(0, appt0.getStartDay());
      assertEquals("Timezone", appt0.getTitle());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Appt appt0 = new Appt((-1728), (-1728), (-1728), (-1728), 0, "\n", "\n");
      appt0.setStartYear(4091);
      int int0 = appt0.getStartYear();
      assertEquals(4091, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Appt appt0 = new Appt(Integer.MAX_VALUE, Integer.MAX_VALUE, 0, 0, 0, "org.apache.xerces.jaxp.datatype.XMLGregorianCalendarImpl", ", ");
      String string0 = appt0.toString();
      assertNull(string0);
      assertEquals(0, appt0.getStartMonth());
      assertEquals(2147483647, appt0.getStartMinute());
      assertEquals(0, appt0.getStartYear());
      assertEquals("org.apache.xerces.jaxp.datatype.XMLGregorianCalendarImpl", appt0.getTitle());
      assertEquals(2147483647, appt0.getStartHour());
      assertEquals(0, appt0.getStartDay());
      assertEquals(", ", appt0.getDescription());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Appt appt0 = new Appt(Integer.MAX_VALUE, Integer.MAX_VALUE, 0, 0, 0, "org.apache.xerces.jaxp.datatype.XMLGregorianCalendarImpl", ", ");
      appt0.setStartMonth(0);
      assertEquals(0, appt0.getStartMonth());
      assertFalse(appt0.getValid());
      assertEquals(0, appt0.getStartDay());
      assertEquals(2147483647, appt0.getStartMinute());
      assertEquals(2147483647, appt0.getStartHour());
      assertEquals("org.apache.xerces.jaxp.datatype.XMLGregorianCalendarImpl", appt0.getTitle());
      assertEquals(0, appt0.getStartYear());
      assertEquals(", ", appt0.getDescription());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Appt appt0 = new Appt(Integer.MAX_VALUE, Integer.MAX_VALUE, 0, 0, 0, "org.apache.xerces.jaxp.datatype.XMLGregorianCalendarImpl", ", ");
      int int0 = appt0.getStartMinute();
      assertEquals(0, appt0.getStartDay());
      assertEquals(", ", appt0.getDescription());
      assertEquals(Integer.MAX_VALUE, int0);
      assertEquals(0, appt0.getStartMonth());
      assertEquals(0, appt0.getStartYear());
      assertFalse(appt0.getValid());
      assertEquals(2147483647, appt0.getStartHour());
      assertEquals("org.apache.xerces.jaxp.datatype.XMLGregorianCalendarImpl", appt0.getTitle());
  }
}
